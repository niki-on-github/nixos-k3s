apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 15m
  timeout: 20m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 56.8.0
      interval: 1h
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system

  values:
    crds:
      enabled: false
      
    cleanPrometheusOperatorObjectNames: true

    kubeApiServer:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: ["__name__"]
            regex: "(aggregator_openapi|aggregator_unavailable|apiextensions_openapi|apiserver_admission|apiserver_audit|apiserver_cache|apiserver_cel|apiserver_client|apiserver_crd|apiserver_current|apiserver_envelope|apiserver_flowcontrol|apiserver_init|apiserver_kube|apiserver_longrunning|apiserver_request|apiserver_requested|apiserver_response|apiserver_selfrequest|apiserver_storage|apiserver_terminated|apiserver_tls|apiserver_watch|apiserver_webhooks|authenticated_user|authentication|disabled_metric|etcd_bookmark|etcd_lease|etcd_request|field_validation|get_token|go|grpc_client|hidden_metric|kube_apiserver|kubernetes_build|kubernetes_feature|node_authorizer|pod_security|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|serviceaccount_legacy|serviceaccount_stale|serviceaccount_valid|watch_cache|workqueue)_(.+)"
            action: keep
          - sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop

    kubeControllerManager:
      enabled: false

    kubeEtcd:
      enabled: false

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          # Remove duplicate metrics
          - sourceLabels: ["__name__"]
            regex: "(apiserver_audit|apiserver_client|apiserver_delegated|apiserver_envelope|apiserver_storage|apiserver_webhooks|authentication_token|cadvisor_version|container_blkio|container_cpu|container_fs|container_last|container_memory|container_network|container_oom|container_processes|container|csi_operations|disabled_metric|get_token|go|hidden_metric|kubelet_certificate|kubelet_cgroup|kubelet_container|kubelet_containers|kubelet_cpu|kubelet_device|kubelet_graceful|kubelet_http|kubelet_lifecycle|kubelet_managed|kubelet_node|kubelet_pleg|kubelet_pod|kubelet_run|kubelet_running|kubelet_runtime|kubelet_server|kubelet_started|kubelet_volume|kubernetes_build|kubernetes_feature|machine_cpu|machine_memory|machine_nvm|machine_scrape|node_namespace|plugin_manager|prober_probe|process_cpu|process_max|process_open|process_resident|process_start|process_virtual|registered_metric|rest_client|scrape_duration|scrape_samples|scrape_series|storage_operation|volume_manager|volume_operation|workqueue)_(.+)"
            action: keep
          - sourceLabels: ["node"]
            targetLabel: instance
            action: replace

    kubeProxy:
      enabled: false

    kubeScheduler:
      enabled: false

    alertmanager:
      enabled: true
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "ignore"
          - name: "email"
            email_configs:
              - to: '${SECRET_SIGNAL_PHONE_NUMBER}@signal.localdomain'
                from: 'alertmanager@${SECRET_DOMAIN}'
                smarthost: "email2signal-mail.notification.svc:8025"
                send_resolved: true
                require_tls: false
        route:
          group_by: ["alertname", "job"]
          group_wait: 1m
          group_interval: 1m
          repeat_interval: 24h
          receiver: email
          routes:
            - receiver: "ignore"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: email
              matchers:
                - severity = "critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]

      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
        hosts:
          - "alert.${SECRET_DOMAIN}"
        tls:
          - hosts:
              - "alert.${SECRET_DOMAIN}"

      alertmanagerSpec:
        replicas: 1
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: local-persistent
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 2Gi

    grafana:
      enabled: false
      defaultDashboardsTimezone: "${CONFIG_TIMEZONE}"
      forceDeployDatasources: false
      forceDeployDashboards: false

    nodeExporter:
      # we install prometheus-node-exporter on host system
      enabled: false

    prometheus:
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "__replica__"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 24h
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - auto-gomaxprocs
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: local-persistent
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 5Gi
        thanos:
          image: quay.io/thanos/thanos:v0.34.0
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: "v0.34.0"
          objectStorageConfig:
            name: thanos-objstore-config
            key: objstore.yml

        resources:
          requests:
            cpu: 50m
            memory: 128M

      thanosService:
        enabled: true

      thanosServiceMonitor:
        enabled: true


